use std::str::FromStr;
use crate::{surface, util};
use std::rc::Rc;

grammar;

Name: String = <s:r"[a-zA-Z][a-zA-Z0-9\-]*"> => s.to_string();

pub Tm: surface::Tm = Located<TmData>;
#[inline] AtomicTm: surface::Tm = Located<AtomicTmData>;

TmData: surface::TmData = {
    AtomicTmData,

    "let" <name:Name> "=" <head:Tm> ";" <body:Tm> => surface::TmData::Let {
        name,
        head: Rc::new(head),
        body: Rc::new(body),
    },

    "(" <args:List<Tm, ",">> ")" "->" <body:Tm> => surface::TmData::FunTy {
        args,
        body: Rc::new(body)
    },

    "(" <args:List<Param, ",">> ")" ":" <ty:Tm> "=>" <body:Tm> => surface::TmData::FunLit {
        args,
        ty: Rc::new(ty),
        body: Rc::new(body),
    },

    "{" <fields:NonEmptyList<RecTyField, ",">> "}" => surface::TmData::RecTy { fields },
    "{" <fields:NonEmptyList<RecLitField, ",">> "}" => surface::TmData::RecLit { fields },
    <tm:AtomicTm> "." <name:Name> => surface::TmData::RecProj { tm: Rc::new(tm), name },

    <head:AtomicTm> "(" <args:List<Tm, ",">> ")" => surface::TmData::FunApp {
        head: Rc::new(head),
        args
    },


    "if" <tm:Tm> "is" <branches:NonEmptyList<<Branch>, "|">> => surface::TmData::Match {
        tm: Rc::new(tm),
        branches
    },
}
Param: surface::Param = {
    <name:Name> ":" <ty:Tm> => surface::Param { name, ty }
}
RecTyField: util::RecField<surface::Tm> = {
    <name:Name> ":" <ty:Tm> => util::RecField::new(name, ty)
}
RecLitField: util::RecField<surface::Tm> = {
    <name:Name> "=" <ty:Tm> => util::RecField::new(name, ty)
}
PatternField: util::RecField<surface::Pattern> = {
    <name:Name> "=" <pattern:Pattern> => util::RecField::new(name, pattern)
}


AtomicTmData: surface::TmData = {
    "{" <tm:TmData> "}" => tm,
    <name:Name> => surface::TmData::Name { name },
    <b:Bool> => surface::TmData::BoolLit { b },
    <i:Num> => surface::TmData::IntLit { i },
    <s:r#"'([^'\\]|\\.)*'"#> => surface::TmData::StrLit { s: s.to_string() }
}


Branch: surface::Branch =
    <pattern:Pattern> "=>" <tm:AtomicTm> => surface::Branch { pattern, tm };
Pattern: surface::Pattern = Located<PatternData>;
PatternData: surface::PatternData = {
    <name:Name> ":" <pattern:Pattern> => surface::PatternData::Named { name, pattern: Rc::new(pattern) },
    "_" => surface::PatternData::Hole,

    <b:Bool> => surface::PatternData::BoolLit { b },
    <i:Num> => surface::PatternData::IntLit { i },
    <s:r#"'([^'\\]|\\.)*'"#> => surface::PatternData::StrLit { s: s.to_string() },


    "{" <fields:List<PatternField, ",">> "}" => surface::PatternData::RecLit { fields },
}



Bool: bool = {
    "true" => true,
    "false" => false,
}
Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

#[inline]
Located<T>: util::Located<T> = {
    <start: @L> <data: T> <end: @R> => util::Located::new(util::Location::new(start, end), data),
};

#[inline]
List<Entry, Sep>: Vec<Entry> = {
    <mut entries: (<Entry> Sep)*> <last: Entry?> => {
        entries.extend(last);
        entries
    }
}

#[inline]
NonEmptyList<Entry, Sep>: Vec<Entry> = {
    <mut entries: (<Entry> Sep)*> <last: Entry> (<Sep>)? => {
        entries.push(last);
        entries
    }
}
