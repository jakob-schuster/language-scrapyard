use std::str::FromStr;
use crate::{surface, util};
use std::rc::Rc;

grammar;

match {
    r"\w+" => ID,
    "=" => EQUAL,
    "?" => QUESTION_MARK,
    r"[a-zA-Z][a-zA-Z0-9\-]*" =>
    "" => {},
}

pub Prog: surface::Prog =
    <stmts:NonEmptyList<Stmt, ";">> => surface::Prog { stmts };

//

pub Stmt: surface::Stmt = Located<StmtData>;
StmtData: surface::StmtData = {
    <name:Name> EQUAL <tm:Tm> => surface::StmtData::Let { name, tm },
    QUESTION_MARK <tm:Tm> => surface::StmtData::Print { tm },
}

//

pub Tm: surface::Tm = Located<TmData>;
TmData: surface::TmData = {
    <b:Bool> => surface::TmData::BoolLit { b },
    <i:Int> => surface::TmData::IntLit { i },
    <name:Name> => surface::TmData::Name { name },
}


//

Bool: bool = {
}
Int: i32 = {}
//<s:r"[0-9]+"> => i32::from_str(s).unwrap();

Name: String = <s:r"[a-zA-Z][a-zA-Z0-9\-]*"> => s.to_string();

//

#[inline]
Located<T>: util::Located<T> = {
    <start: @L> <data: T> <end: @R> => util::Located::new(util::Location::new(start, end), data),
};

#[inline]
List<Entry, Sep>: Vec<Entry> = {
    <mut entries: (<Entry> Sep)*> <last: Entry?> => {
        entries.extend(last);
        entries
    }
}

#[inline]
NonEmptyList<Entry, Sep>: Vec<Entry> = {
    <mut entries: (<Entry> Sep)*> <last: Entry> (<Sep>)? => {
        entries.push(last);
        entries
    }
}
